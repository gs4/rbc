#!/usr/bin/env ruby
##################
#
#  rbc_make: recurses the local directory structure
#    and uses rbc_pp.rb to generate #{file} from
#    each #{file}.rbc. For instance, foo.cc.rbc -> foo.cc
#
#  this program makes destructive writes the filesystem, so
#    use with caution!
#
#  author: gordon.sommers@gmail.com
#
####

######
#
# TODOs: support more command line args
#
# maybe-todos: make a nondestructive version of this?
#              make rbc_pp export a class that we can call directly?
#

require 'find'
require 'rbc_pp'

def usage
  puts "usage: #{$0} [-h]"
  puts "  -h include hidden directories (unix only)"
  puts "  -p pretend; don't actually write any files"
  puts "  -c compile; pass the files directly to g++"
  exit 0
end

incl_hidden,pretend,compile = false,false,false
ARGV.each do |arg|
  case arg
    when "-h" then incl_hidden = true
    when "-p" then pretend = true
	when "-c" then compile = true
    else usage
  end
end

Find.find("./") do |f|
  ftype = File.ftype f
  fst_chr = File.basename(f)[0]
  Find.prune if f != "./" && (not incl_hidden) && ftype == "directory" && fst_chr == ?.
  
  if f =~ /\.rbc$/ && ftype == "file" && fst_chr != ?.
    newf = f[0..-5]
    puts "* about to process #{f}"
	next if pretend
	File.open(newf,'w') do |out_fh|
      parse_file(File.open(f),out_fh)
    end
    puts "  >> generation #{f} -> #{newf} complete."
	if compile
	  cname = File.join(File.dirname(newf),File.basename(newf,File.extname(newf)))
	  puts "  >> g++ -o #{cname} #{newf}"
	  puts `g++ -o #{cname} #{newf}`
	end
  end
end

